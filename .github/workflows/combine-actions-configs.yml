name: Combine Configuration Files

on:
  push:
    branches: [ main, master ]
    paths:
      - 'actions/**/*.conf'
      - 'actions/**/*.config'
      - 'actions/**/*.cfg'
  pull_request:
    paths:
      - 'actions/**/*.conf'
      - 'actions/**/*.config'
      - 'actions/**/*.cfg'
  workflow_dispatch:

jobs:
  combine-config-files:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create actions folder if it doesn't exist
      run: |
        mkdir -p actions
        echo "Actions folder ready"
        ls -la actions/
        
    - name: Debug - Check current directory and files
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Actions folder contents:"
        ls -la actions/ || echo "Actions folder doesn't exist or is empty"
        echo "Looking for config files:"
        find . -name "*.conf" -o -name "*.config" -o -name "*.cfg" || echo "No config files found anywhere"
        
    - name: Scan for configuration files
      id: scan
      run: |
        echo "Scanning for configuration files in actions folder..."
        
        # Count configuration files (excluding the combined file)
        conf_count=$(find actions -name "*.conf" -o -name "*.config" -o -name "*.cfg" 2>/dev/null | grep -v "actions/ALL_ACTIONS.conf" | wc -l)
        echo "Found $conf_count configuration files"
        echo "conf_count=$conf_count" >> $GITHUB_OUTPUT
        
        # List all found files
        echo "Configuration files found:"
        find actions -name "*.conf" -o -name "*.config" -o -name "*.cfg" 2>/dev/null | grep -v "actions/ALL_ACTIONS.conf" | sort || echo "No configuration files found"
        
    - name: Generate combined configuration file
      if: steps.scan.outputs.conf_count > 0
      run: |
        output_file="actions/ALL_ACTIONS.conf"
        echo "Creating output file: $output_file"
        
        # Create the output file with header
        cat > "$output_file" << 'EOF'
        # ============================================================================
        # COMBINED CONFIGURATION FILE
        # ============================================================================
        #
        EOF
        
        echo "# Repository: ${{ github.repository }}" >> "$output_file"
        echo "# Branch: ${{ github.ref_name }}" >> "$output_file"
        echo "# Generated: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> "$output_file"
        echo "# Commit: ${{ github.sha }}" >> "$output_file"
        echo "# Total Config Files: ${{ steps.scan.outputs.conf_count }}" >> "$output_file"
        echo "#" >> "$output_file"
        echo "# This file contains all configuration files found in the actions/ directory." >> "$output_file"
        echo "# Configuration files are automatically combined whenever changes are detected." >> "$output_file"
        echo "#" >> "$output_file"
        echo "# IMPORTANT: This file is auto-generated. Do not edit manually!" >> "$output_file"
        echo "# ============================================================================" >> "$output_file"
        echo "" >> "$output_file"
        
        # Process each configuration file
        file_counter=0
        find actions -name "*.conf" -o -name "*.config" -o -name "*.cfg" 2>/dev/null | grep -v "actions/ALL_ACTIONS.conf" | sort | while read file; do
          file_counter=$((file_counter + 1))
          echo "Processing file: $file (file #$file_counter)"
          filename=$(basename "$file")
          
          echo "" >> "$output_file"
          echo "# ============================================================================" >> "$output_file"
          echo "# FILE: $filename" >> "$output_file"
          echo "# ============================================================================" >> "$output_file"
          echo "" >> "$output_file"
          
          # Smart filtering that preserves content within config blocks
          temp_file=$(mktemp)
          in_config_block=false
          is_first_file=$([ $file_counter -eq 1 ] && echo "true" || echo "false")
          
          while IFS= read -r line; do
            # Check if line starts with "config system automation-action"
            if echo "$line" | grep -q '^[[:space:]]*config system automation-action'; then
              # Only keep this line in the first file
              if [ "$is_first_file" = "true" ]; then
                echo "$line" >> "$temp_file"
                in_config_block=true
              else
                # Skip this line in subsequent files but still track we're in a config block
                in_config_block=true
              fi
            # Check if line starts with other "config system" types
            elif echo "$line" | grep -q '^[[:space:]]*config system'; then
              in_config_block=true
              echo "$line" >> "$temp_file"
            # Check if we're at the end of a config block
            elif echo "$line" | grep -q '^[[:space:]]*end[[:space:]]*$' && [ "$in_config_block" = true ]; then
              echo "$line" >> "$temp_file"
              in_config_block=false
            # If we're inside a config block, keep everything (including whitespace lines)
            elif [ "$in_config_block" = true ]; then
              echo "$line" >> "$temp_file"
            # Outside config blocks, filter out comments and empty lines
            elif ! echo "$line" | grep -q '^[[:space:]]*#' && ! echo "$line" | grep -q '^[[:space:]]*$'; then
              echo "$line" >> "$temp_file"
            fi
          done < "$file"
          
          # Add processed content to output file
          cat "$temp_file" >> "$output_file"
          rm -f "$temp_file"
          
          echo "" >> "$output_file"
          echo "# End of $filename" >> "$output_file"
        done
        
        echo "‚úÖ Combined configuration generated"
        echo "File size: $(wc -l < "$output_file") lines"
        echo "First 10 lines of generated file:"
        head -10 "$output_file"
        
    - name: Handle no configuration files
      if: steps.scan.outputs.conf_count == 0
      run: |
        output_file="actions/ALL_ACTIONS.conf"
        echo "No config files found, creating placeholder"
        
        cat > "$output_file" << 'EOF'
        # ============================================================================
        # COMBINED CONFIGURATION FILE
        # ============================================================================
        #
        # Status: No configuration files found
        EOF
        echo "# Generated: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> "$output_file"
        echo "#" >> "$output_file"
        echo "# No .conf, .config, or .cfg files were found in the actions/ directory." >> "$output_file"
        echo "# ============================================================================" >> "$output_file"
        
        echo "‚ÑπÔ∏è Placeholder file created"
        
    - name: Verify file creation
      run: |
        echo "Checking if file was created:"
        if [ -f "actions/ALL_ACTIONS.conf" ]; then
          echo "‚úÖ File exists!"
          echo "File size: $(wc -l < actions/ALL_ACTIONS.conf) lines"
          echo "File content preview:"
          head -20 actions/ALL_ACTIONS.conf
        else
          echo "‚ùå File was not created!"
          exit 1
        fi
        
    - name: Commit configuration file
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Config Combiner Bot"
        
        echo "Git status before adding:"
        git status
        
        # Add the generated conf file
        git add actions/ALL_ACTIONS.conf
        
        echo "Git status after adding:"
        git status
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "üìã No changes to commit - configuration is up to date"
        else
          commit_msg="üîß Auto-update: Combined configuration file (${{ steps.scan.outputs.conf_count }} files)"
          echo "Committing with message: $commit_msg"
          git commit -m "$commit_msg"
          git push
          echo "‚úÖ Configuration file committed and pushed"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Final verification
      run: |
        echo "Final check - listing all files in actions folder:"
        ls -la actions/
        echo "Repository status:"
        git log --oneline -3